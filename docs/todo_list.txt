# TO DO List

- [X] **Reenforce the audience for this tutorial**

	The main audience for this tutorial is peeople with some background in programming in other languages or C++. People with notion of variables, functions, commands, operation, arrays, structures, and if possible object oriented (OOP) or generics (templates).
	Not needed to have knowledge in modern C++ or advanced programming.


- [ ] Explore (also subfolders): https://herbsutter.com/2023/04/30/cppfront-spring-update/ 

- [ ] Show that the compiler when compiles a cpp file generated by cpp2, will show all error/warnings with references to cpp2 file, like the debuger does (I tested with gcc so far).

- [ ] Add each topic in Ket Features chapter a link to the other chapter where the topic will be explored deeply

- [ ] For each possible combination of attributes for `this` and `that` (and also params in normal function) show what the combination in Cppfront will generate in C++. E.g. in, out, inout, move, implicit, virtual, override, implicit...: https://github.com/hsutter/cppfront/wiki/Cpp2:-operator=,-this-&-that

- [ ] Take a look in https://github.com/ntrel/cpp2#readme


In Cpp2: https://cppclub.uk/meetings/2022/154/
- [ ] [**Core Guidelines are the defaults**](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines)
- [X] inspect expression
- [X] Bounds Checks
- [X] Anonymous Variables --> Specifying Parameter Types Explicitly
- [X] Returning Multiple Values. f: () -> (i: int, s: std::string) = {}
- [X] Variadic Template Functions --> this is C++ standard, nothing special in Cppfront so far.
- [X] Error handling: https://www.youtube.com/watch?v=os7cqJ5qlzo https://www.youtube.com/watch?v=ARYP83yNAWk
- [X] left-to-right declarations: name: type = value
- [X] implicit import std (modules-first design)
- [X] _ wildcard
- [X] optional {return ...} for single-expression functions
- [X] lambda is declared the same way as a function, but omits the name => short lambda syntax
- [X] order-independent syntax, no forward declarations
- [X] no preprocessor! (in pure mode) -> Added as an opne point reflection and generation.
- [X] all type casts done via as
- [X] all variables are initialised before use; nullptr is not supported
- [X] automatically defined variables: `local_foo := func()`, whoa, he really used `:=`
- [X] universal function call syntax (UFCS): `vec.ssize()` instead of `std::ssize(vec)` (also helps IntelliSense)
- [X] delete and owning raw pointers are not supported
- [X] no pointer arithmetic
- [X] union not supported
- [X] unary operators are suffixes: to get an address, follow the expression with &
- [X] class inheritance
- [X] contracts!!
	- [X] pre, post
	- [X] assert
- [X] default const, default nodiscard 
- [X] new is make_unique
- [X] no pointer math
- [X] parameter passing: out parameters (weren’t they discouraged? it looks like a regression from returning values…), also: copy, inout, move, and forward
- [X] in parameters are automatically const, and you don’t need to choose between passing by value or by reference (hi Carbon)
- [X] variable capture using $ for lambdas, post-conditions, and string interpolation
- [X] static variables inside a class.
	- [X] `static const` using alias
	- [X] `static` non-const not yet implemented in Cppfront: https://github.com/hsutter/cppfront/issues/522

Also to consider:
- [ ] https://changkun.de/modern-cpp/pdf/modern-cpp-tutorial-en-us.pdf


# Structure

├── README.md
├── sidebar.md
├── todo_list.txt
├── index.html
├── basics
│   ├── Overview.md
│   ├── Introduction_Cppfront_Language.md
│   ├── Cppfront_VS_Rust.md
│   ├── Installation_and_compilation.md
│   ├── First_Program.md
│   └── Key_features.md
├── basic_data_types
│   ├── Overview.md
│   ├── Basic_types.md
│   ├── Variables.md
│   ├── Operators.md
│   ├── Automatic_type.md
│   └── Strings.md
├── containers
│   ├── Overview.md
│   ├── Arrays_Matrices.md
│   ├── Vectors.md
│   ├── Tuples.md
│   └── Ranges_Views.md
├── control_statements
│   ├── Overview.md
│   ├── Introduction_Controls.md
│   ├── Selection.md
│   └── Repetition.md
├── pointers_and_references
│   ├── Overview.md
│   ├── Introduction.md
│   ├── Memory_safety.md
│   ├── RAII.md
│   ├── Pointe_strings.md
│   └── Conversions.md
├── functions
│   ├── Overview.md
│   ├── Declaration.md
│   ├── Parameters.md
│   ├── Lambdas.md
│   ├── Scope_Lifetime.md
│   └── functional_prog.md
├── user_defined_types
│   ├── Overview.md
│   ├── Overvie_new_syntax_type.md
│   ├── Introduction_OOP.md
│   ├── Constructors_destructors.md
│   ├── Copy.md
│   └── Move.md
├── generics
│   ├── Overview.md
│   ├── Templates.md
│   └── Templates_concepts.md
├── advanced_topics
│   ├── Overview.md
│   ├── Packages.md **************** to create
│   ├── Modules.md
│   ├── Recursion.md
│   ├── Threads.md
│   └── Network.md
└── appendix
    ├── Overview.md
    ├── Debug.md
    ├── CMake.md
    └── Include_cpp2util.md



